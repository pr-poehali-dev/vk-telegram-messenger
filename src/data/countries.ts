export interface Country {
  code: string;
  name: string;
  dialCode: string;
  flag: string;
  phoneLength: number[];
}

export const countries: Country[] = [
  { code: 'RU', name: '–†–æ—Å—Å–∏—è', dialCode: '+7', flag: 'üá∑üá∫', phoneLength: [10] },
  { code: 'US', name: '–°–®–ê', dialCode: '+1', flag: 'üá∫üá∏', phoneLength: [10] },
  { code: 'GB', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', dialCode: '+44', flag: 'üá¨üáß', phoneLength: [10] },
  { code: 'DE', name: '–ì–µ—Ä–º–∞–Ω–∏—è', dialCode: '+49', flag: 'üá©üá™', phoneLength: [10, 11] },
  { code: 'FR', name: '–§—Ä–∞–Ω—Ü–∏—è', dialCode: '+33', flag: 'üá´üá∑', phoneLength: [9] },
  { code: 'IT', name: '–ò—Ç–∞–ª–∏—è', dialCode: '+39', flag: 'üáÆüáπ', phoneLength: [9, 10] },
  { code: 'ES', name: '–ò—Å–ø–∞–Ω–∏—è', dialCode: '+34', flag: 'üá™üá∏', phoneLength: [9] },
  { code: 'UA', name: '–£–∫—Ä–∞–∏–Ω–∞', dialCode: '+380', flag: 'üá∫üá¶', phoneLength: [9] },
  { code: 'BY', name: '–ë–µ–ª–∞—Ä—É—Å—å', dialCode: '+375', flag: 'üáßüáæ', phoneLength: [9] },
  { code: 'KZ', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', dialCode: '+7', flag: 'üá∞üáø', phoneLength: [10] },
  { code: 'CN', name: '–ö–∏—Ç–∞–π', dialCode: '+86', flag: 'üá®üá≥', phoneLength: [11] },
  { code: 'JP', name: '–Ø–ø–æ–Ω–∏—è', dialCode: '+81', flag: 'üáØüáµ', phoneLength: [10] },
  { code: 'KR', name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', dialCode: '+82', flag: 'üá∞üá∑', phoneLength: [10, 11] },
  { code: 'IN', name: '–ò–Ω–¥–∏—è', dialCode: '+91', flag: 'üáÆüá≥', phoneLength: [10] },
  { code: 'BR', name: '–ë—Ä–∞–∑–∏–ª–∏—è', dialCode: '+55', flag: 'üáßüá∑', phoneLength: [10, 11] },
  { code: 'AR', name: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', dialCode: '+54', flag: 'üá¶üá∑', phoneLength: [10] },
  { code: 'MX', name: '–ú–µ–∫—Å–∏–∫–∞', dialCode: '+52', flag: 'üá≤üáΩ', phoneLength: [10] },
  { code: 'CA', name: '–ö–∞–Ω–∞–¥–∞', dialCode: '+1', flag: 'üá®üá¶', phoneLength: [10] },
  { code: 'AU', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', dialCode: '+61', flag: 'üá¶üá∫', phoneLength: [9] },
  { code: 'TR', name: '–¢—É—Ä—Ü–∏—è', dialCode: '+90', flag: 'üáπüá∑', phoneLength: [10] },
  { code: 'EG', name: '–ï–≥–∏–ø–µ—Ç', dialCode: '+20', flag: 'üá™üá¨', phoneLength: [10] },
  { code: 'ZA', name: '–Æ–ê–†', dialCode: '+27', flag: 'üáøüá¶', phoneLength: [9] },
  { code: 'AE', name: '–û–ê–≠', dialCode: '+971', flag: 'üá¶üá™', phoneLength: [9] },
  { code: 'SA', name: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', dialCode: '+966', flag: 'üá∏üá¶', phoneLength: [9] },
  { code: 'IL', name: '–ò–∑—Ä–∞–∏–ª—å', dialCode: '+972', flag: 'üáÆüá±', phoneLength: [9] },
];

export const validatePhoneNumber = (phone: string, country: Country): boolean => {
  const cleanPhone = phone.replace(/\D/g, '');
  return country.phoneLength.includes(cleanPhone.length);
};

export const formatPhoneNumber = (phone: string, country: Country): string => {
  const cleanPhone = phone.replace(/\D/g, '');
  
  if (country.code === 'RU' || country.code === 'KZ') {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π/–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: +7 999 999 99 99
    if (cleanPhone.length <= 3) return cleanPhone;
    if (cleanPhone.length <= 6) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3)}`;
    if (cleanPhone.length <= 8) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6)}`;
    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6, 8)} ${cleanPhone.slice(8, 10)}`;
  }
  
  if (country.code === 'US' || country.code === 'CA') {
    // –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π/–ö–∞–Ω–∞–¥—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: +1 999 999 9999
    if (cleanPhone.length <= 3) return cleanPhone;
    if (cleanPhone.length <= 6) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3)}`;
    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6, 10)}`;
  }
  
  if (country.code === 'DE') {
    // –ù–µ–º–µ—Ü–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: +49 999 999 9999
    if (cleanPhone.length <= 3) return cleanPhone;
    if (cleanPhone.length <= 6) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3)}`;
    if (cleanPhone.length <= 9) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6)}`;
    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6, 10)}`;
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  const maxLength = Math.max(...country.phoneLength);
  if (cleanPhone.length <= 3) return cleanPhone;
  if (cleanPhone.length <= 6) return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3)}`;
  return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6, maxLength)}`;
};